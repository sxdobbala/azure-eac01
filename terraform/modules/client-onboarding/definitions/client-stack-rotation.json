{
    "Comment": "Workflow for rotating clients on a new MSTR stack",
    "StartAt": "Setup Redshift Security",
    "States": {
        "Setup Redshift Security": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${OPA_CLIENT_REDSHIFT_SECURITY_LAMBDA_ARN}",
                "Payload": {
                    "envId.$": "$.envId",
                    "redshiftId.$": "$.redshiftId"
                }
            },
            "OutputPath": "$",
            "ResultPath": null,
            "Next": "Delete Old ELB Rule"
        },
        "Delete Old ELB Rule": {
            "Comment": "Delete old ELB listener rule targeting the old stack",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${TF_RUNNER_LAMBDA_ARN}",
                "Payload": {
                    "httpMethod": "POST",
                    "body": {
                        "tf_source_bucket": "${TF_SOURCE_BUCKET}",
                        "tf_source_key": "${TF_SOURCE_KEY}",
                        "tf_vars": {
                            "env_prefix": "${ENV_PREFIX}",
                            "env_id.$": "$.oldEnvId",
                            "env_name.$": "$.environmentName",
                            "app_elb_path.$": "$.appElbPath",
                            "opa_release_sns_topic_arn": "${OPA_RELEASE_SNS_TOPIC_ARN}",
                            "vpc_id": "${VPC_ID}",
                            "create_listener_rule": "false"
                        }
                    }
                }
            },
            "ResultPath": null,
            "OutputPath": "$",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Delete New ELB Rule"
                }
            ],
            "Next": "Create New ELB Rule"
        },
        "Create New ELB Rule": {
            "Comment": "Create new ELB listener rule targeting the new stack",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${TF_RUNNER_LAMBDA_ARN}",
                "Payload": {
                    "httpMethod": "POST",
                    "body": {
                        "tf_source_bucket": "${TF_SOURCE_BUCKET}",
                        "tf_source_key": "${TF_SOURCE_KEY}",
                        "tf_vars": {
                            "env_prefix": "${ENV_PREFIX}",
                            "env_id.$": "$.envId",
                            "env_name.$": "$.environmentName",
                            "app_elb_path.$": "$.appElbPath",
                            "opa_release_sns_topic_arn": "${OPA_RELEASE_SNS_TOPIC_ARN}",
                            "vpc_id": "${VPC_ID}",
                            "create_listener_rule": "true"
                        }
                    }
                }
            },
            "ResultPath": null,
            "OutputPath": "$",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Delete New ELB Rule"
                }
            ],
            "Next": "Run Smoke Test"
        },
        "Run Smoke Test": {
            "Comment": "Ensure OPA is running on the new environment",
            "Type": "Task",
            "Resource": "${OPA_SMOKE_TEST_LAMBDA_ARN}",
            "InputPath": "$.appElbPath",
            "OutputPath": "$",
            "ResultPath": null,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.results.smokeTest",
                    "Next": "Smoke Test Failed"
                }
            ],
            "Next": "Smoke Test OK"
        },
        "Smoke Test OK": {
            "Comment": "Smoke test succeeded. Proceed to record the new stack in OPA Master and migrate configs.",
            "Type": "Pass",
            "InputPath": "$",
            "OutputPath": "$",
            "Next": "Change Timezone"
        },
        "Smoke Test Failed": {
            "Comment": "Smoke test failed. Proceed to Restore Old ELB Rule.",
            "Type": "Pass",
            "InputPath": "$",
            "OutputPath": "$",
            "Next": "Delete New ELB Rule"
        },
        "Delete New ELB Rule": {
            "Comment": "Delete new ELB listener rule targeting the new environment",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${TF_RUNNER_LAMBDA_ARN}",
                "Payload": {
                    "httpMethod": "POST",
                    "body": {
                        "tf_source_bucket": "${TF_SOURCE_BUCKET}",
                        "tf_source_key": "${TF_SOURCE_KEY}",
                        "tf_vars": {
                            "env_prefix": "${ENV_PREFIX}",
                            "env_id.$": "$.envId",
                            "env_name.$": "$.environmentName",
                            "app_elb_path.$": "$.appElbPath",
                            "opa_release_sns_topic_arn": "${OPA_RELEASE_SNS_TOPIC_ARN}",
                            "vpc_id": "${VPC_ID}",
                            "create_listener_rule": "false"
                        }
                    }
                }
            },
            "ResultPath": null,
            "OutputPath": "$",
            "Next": "Restore Old ELB Rule"
        },
        "Restore Old ELB Rule": {
            "Comment": "Restore old ELB listener rule targeting the old environment",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${TF_RUNNER_LAMBDA_ARN}",
                "Payload": {
                    "httpMethod": "POST",
                    "body": {
                        "tf_source_bucket": "${TF_SOURCE_BUCKET}",
                        "tf_source_key": "${TF_SOURCE_KEY}",
                        "tf_vars": {
                            "env_prefix": "${ENV_PREFIX}",
                            "env_id.$": "$.oldEnvId",
                            "env_name.$": "$.environmentName",
                            "app_elb_path.$": "$.appElbPath",
                            "opa_release_sns_topic_arn": "${OPA_RELEASE_SNS_TOPIC_ARN}",
                            "vpc_id": "${VPC_ID}",
                            "create_listener_rule": "true"
                        }
                    }
                }
            },
            "ResultPath": null,
            "OutputPath": "$",
            "Next": "Workflow Failed"
        },
        "Change Timezone": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${OPA_TIMEZONE_CHANGE_LAMBDA_ARN}",
                "Payload": {
                    "envId.$": "$.envId"
                }
            },
            "OutputPath": "$",
            "ResultPath": null,
            "Next": "Migrate Environment Configs"
        },
        "Migrate Environment Configs": {
            "Comment": "Invoke lambda to move all clients from the old environment to the new one",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${OPA_CLIENT_ENV_MOVE_LAMBDA_ARN}",
                "Payload": {
                    "oldEnvId.$": "$.oldEnvId",
                    "envId.$": "$.envId"
                }
            },
            "OutputPath": "$",
            "ResultPath": "$.results.migrateEnvConfigs",
            "End": true
        },
        "Workflow Failed": {
            "Type": "Fail",
            "Cause": "Workflow failed",
            "Error": "See execution logs"
        }
    }
}