---
- hosts: localhost
  remote_user: mstr

  vars:
    mstr_license_update_tracker: ./mstr-license-update.tracker
    ansible_python_interpreter: /usr/bin/python # Points to python 2.*. Which is needed for yum tasks
    redshift_driver: https://s3.amazonaws.com/redshift-downloads/drivers/odbc/1.4.3.1000/AmazonRedshiftODBC-64-bit-1.4.3.1000-1.x86_64.rpm
    env_id: "{{ ansible_hostname | regex_search('(env-[0-9]+)') }}"
    env_prefix: "{{ ssm_params.env_prefix }}"
    elb_path: "{{ ssm_params.elb_path }}"
    mstr_project_user: "mstr"
    mstr_project_name: "Performance Analytics"
    mysql_username: "mysqladmin"
    is_primary_node: "{{ ansible_hostname is search('laio1') or ansible_hostname is search('laiouse1') }}"
    mstr_password_key: "{{ '/' + env_id + '/MSTR_PASSWORD' }}"
    mstrbak_dir: "/opt/mstr/MicroStrategy/bin/mstrbak"

  vars_files:
    - ./vars/tomcat_web_xml_elements.yaml
    - ./vars/env_vars.yaml

  handlers:
    - name: Restart tomcat
      command: /sbin/service mstr tomcatrestart
      args:
        warn: no
      listen: "Restart tomcat"

  tasks:
    - name: Add environment variables to tomcat setenv.sh
      lineinfile:
        dest: /opt/apache/tomcat/latest/bin/setenv.sh
        state: present
        regexp: "^export {{ item.key }}"
        line: "export {{ item.key }}={{ item.value}}"
      with_items: "{{ env_vars }}"
      notify: "Restart tomcat"

    - name: Gather ec2 metadata facts
      ec2_metadata_facts:
      no_log: true

    - name: Load environment params
      set_fact:
        ssm_params: "{{ lookup('aws_ssm', '/'+env_id, region=ansible_ec2_placement_region,  shortnames=true, bypath=true, decrypt=true ) }}"
        artifacts_s3_bucket: "{{ lookup('aws_ssm', 'artifacts_s3_bucket', region=ansible_ec2_placement_region ) }}"

    - name: Grant mstr user write permissions to ca-trust-source folder for ca certificate
      become: yes
      become_user: root
      command: setfacl -R -m u:mstr:rwx /usr/share/pki/ca-trust-source/anchors/

    - name: Grant mstr user execute permission to scripts folder
      become: yes
      become_user: root
      command: setfacl -R -m u:mstr:rwx ./scripts

    - name: Get certficate from s3
      aws_s3:
        bucket: "{{ artifacts_s3_bucket }}"
        object: "{{ lookup('aws_ssm', 'ca_public_cert_s3_path', region=ansible_ec2_placement_region) }}"
        dest: /usr/share/pki/ca-trust-source/anchors/{{ ansible_ec2_instance_identity_document_accountid }}_ca.crt
        mode: get
        overwrite: different
      register: certificate

    - name: Update CA trust
      become: yes
      become_user: root
      command: update-ca-trust
      when: certificate.changed

    - name: Import java certificate
      become: yes
      become_user: root
      java_cert:
        cert_alias: "{{ ansible_ec2_instance_identity_document_accountid }}_ca"
        cert_path: "/usr/share/pki/ca-trust-source/anchors/{{ ansible_ec2_instance_identity_document_accountid }}_ca.crt"
        keystore_path: /opt/jdk/java/jre/lib/security/cacerts
        keystore_pass: changeit # "{{ lookup('aws_ssm', 'java_keystore_password', region=ansible_ec2_placement_region) }}"
        keystore_create: yes
        state: present

    - set_fact:
        ansible_facts:
          pkg_mgr: yum

    - name: Install/Update Drivers
      become: yes
      become_user: root
      yum:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      loop:
        - { name: "{{ redshift_driver }}", state: present }
        - { name: collectd, state: latest }
    
    - name: Copy Redshift ErrorMessages as a temporary fix
      copy:
        src: "/opt/amazon/redshiftodbc/ErrorMessages/en-US"
        dest: "/opt/amazon/redshiftodbc/lib/64"
        owner: root
        group: root
        mode: preserve

    - name: Check if httpHeaderSecurity filter exists
      become: yes
      become_user: mstr
      xml:
        path: "{{ tomcat_web_xml_path }}"
        namespaces:
          x: http://xmlns.jcp.org/xml/ns/javaee
        xpath: /x:web-app/x:filter/x:filter-name[text()="httpHeaderSecurity"]
        count: yes
      register: header_security_filter

    - name: Check if httpHeaderSecurity filter-mapping exists
      become: yes
      become_user: mstr
      xml:
        path: "{{ tomcat_web_xml_path }}"
        namespaces:
          x: http://xmlns.jcp.org/xml/ns/javaee
        xpath: /x:web-app/x:filter-mapping/x:filter-name[text()="httpHeaderSecurity"]
        count: yes
      register: header_security_filter_mapping

    - name: Add httpHeaderSecurity filter
      become: yes
      become_user: mstr
      xml:
        path: "{{ tomcat_web_xml_path }}"
        namespaces:
          x: http://xmlns.jcp.org/xml/ns/javaee
        xpath: /x:web-app
        pretty_print: true
        add_children: "{{ tomcat_filter_element }}"
      when: header_security_filter.count == 0
      notify: "Restart tomcat"

    - name: Add httpHeaderSecurity filter-mapping
      become: yes
      become_user: mstr
      xml:
        path: "{{ tomcat_web_xml_path }}"
        namespaces:
          x: http://xmlns.jcp.org/xml/ns/javaee
        xpath: /x:web-app
        pretty_print: true
        add_children: "{{ tomcat_filter_mapping_element }}"
      when: header_security_filter_mapping.count == 0
      notify: "Restart tomcat"

    - name: Create cloudwatch-agent-config.json
      template:
        src: cloudwatch-agent-config-template.json
        dest: /opt/aws/amazon-cloudwatch-agent/bin/cloudwatch-agent-config.json
        owner: root
        group: root

    - name: Fetch cw Agent Config
      become: yes
      become_user: root
      command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/cloudwatch-agent-config.json -s

    - name: Check if MSTR License Update was executed before
      stat:
        path: "{{ mstr_license_update_tracker }}"
      register: license_updated

    - name: Update MSTR License Key
      become: yes
      become_user: root
      shell: ./scripts/update-mstr-license-key.sh
      when: not license_updated.stat.exists

    - name: Create a tracker file
      file:
        path: "{{ mstr_license_update_tracker }}"
        state: touch
        access_time: preserve
        modification_time: preserve

    - name: Update tomcat heap size to 1GB
      lineinfile:
        path: /opt/apache/tomcat/latest/bin/setenv.sh
        regexp: "^export JAVA_OPTS="
        insertafter: "^export JAVA_OPTS="
        line: export JAVA_OPTS="-Xms1024m -Xmx3096m -XX:MaxPermSize=512m -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintClassHistogram -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/mstr"
      notify: "Restart tomcat"

    - name: Set CATALINA_PID environment variable
      lineinfile:
        path: /opt/apache/tomcat/latest/bin/setenv.sh
        line: export CATALINA_PID=/opt/apache/tomcat/latest/catalina.pid
      notify: "Restart tomcat"

    - name: Posthardening
      become: yes
      become_user: root
      cron:
        name: "Posthardening"
        state: present
        minute: "0"
        hour: "5"
        job: "/usr/sbin/aide --check"

    - name: Add crontab line for mstr weekly restart
      become: yes
      become_user: mstr
      cron:
        name: "Restart MSTR I-Server weekly"
        state: present
        minute: "{% if is_primary_node %}00{% else %}30{% endif %}"
        hour: "22"
        weekday: "6"
        job: "/sbin/service microstrategy corerestart"

    - name: Monitor service status via cloudwatch
      become: yes
      become_user: root
      cron:
        name: "Use a script to push service status to cloudwatch"
        job: "cd {{ playbook_dir }}/process-monitoring && sh ./bin/process-mon.sh"

    # TODO: consider using mount module in ansible to replace this
    - name: Config Shared Location
      become: yes
      become_user: root
      command: ./scripts/config-shared-location.sh

    - name: Create Directory for mstrbak utility
      become: yes
      file:
        path: "{{ mstrbak_dir }}"
        state: directory
        mode: 0777
        owner: mstr
        group: mstr

    - name: Download mstrbak.zip file from s3
      aws_s3:
        bucket: "{{ artifacts_s3_bucket }}"
        object: "mstr-artifacts/mstrbak.zip"
        mode: get
        dest: "{{ mstrbak_dir }}/mstrbak.zip"
        overwrite: different

    - name: Unpack mstrbak.zip
      unarchive:
        src: "{{ mstrbak_dir }}/mstrbak.zip"
        dest: "{{ mstrbak_dir }}"
        owner: mstr
        group: mstr

    - name: Restart tomcat before configuring MSTR
      become: yes
      become_user: root
      command: /sbin/service mstr tomcatrestart
      args:
        warn: no

    - name: "Configure webserver macro, statistics and Enterprise Manager dataload"
      become: yes
      become_user: root
      command: "python3 ./scripts/configure_em.py --mstr_username {{ mstr_project_user }} --mstr_password_key {{ mstr_password_key }} --mysql_username {{ mysql_username }} --mysql_password_key {{ mstr_password_key }} --env_prefix {{ssm_params.env_prefix}} --app_elb_path {{ssm_params.elb_path}}"
      when: is_primary_node

    - name: "Configure MSTR memory setting of max. RAM usage for Working set, Datasets, Formatted Documents and Intelligence Cube based on EC2 instance type"
      become: yes
      become_user: root
      command: "python3 ./scripts/update_proj_memory.py --mstr_project '{{ mstr_project_name }}' --mstr_username {{ mstr_project_user }} --mstr_password_key {{ mstr_password_key }} "
      when: is_primary_node
