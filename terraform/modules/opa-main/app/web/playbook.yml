---
- hosts: "{{ host }}"
  connection: local
  gather_facts: true
  gather_subset: min
  remote_user: mstr
  vars:
    envname: "{{ ansible_hostname | regex_search('(env-[0-9]+)') }}"
    ansible_python_interpreter: /usr/bin/python # Points to python 2.*. Which is needed for tasks that depend on libselinux-python
    default_owner: mstr
    default_group: mstr

  handlers:
    - name: Reload MicroStrategy webapp
      file:
        path: "{{ webapp_path }}/WEB-INF/web.xml"
        state: touch

  tasks:
    - name: Grant mstr user execute permission to scripts folder
      command: setfacl -R -m u:mstr:rwx ./scripts
      become: yes
      become_user: root

    - name: Gather ec2 metadata facts
      ec2_metadata_facts:
      no_log: true

    - name: Fetch cloud formation stack facts
      cloudformation_facts:
        stack_name: "{{ envname }}"
        region: "{{ ansible_ec2_placement_region }}"
      no_log: true

    - name: Set iserver host names
      set_fact:
        iservers: "{{ iservers|default([]) | list + [cloudformation[envname]['stack_outputs'][item] | lower] | unique }}"
      loop: "{{ cloudformation[envname]['stack_outputs'].keys() | select('match', '^PlatformInstanceHostname\\d*$') | list }}"

    - name: Load environment params and artifact bucket name from AWS SSM
      set_fact:
        ssm_params: "{{ lookup('aws_ssm', '/'+envname, region=ansible_ec2_placement_region,  shortnames=true, bypath=true, decrypt=true ) }}"
        env_prefix_ssm_params: "{{ lookup('aws_ssm', '/'+env_prefix, region=ansible_ec2_placement_region,  shortnames=true, bypath=true, decrypt=true ) }}"
        artifacts_s3_bucket: "{{ lookup('aws_ssm', 'artifacts_s3_bucket', region=ansible_ec2_placement_region ) }}"
      no_log: true

    - name: Override base config with environment specific config using recursive merge
      set_fact:
        config: "{{ web }}"
      no_log: true

    - name: Copy WAR to target folder
      copy:
        src: "{{ release_source }}/current_release/oap-mstr-web.war"
        dest: "{{ playbook_dir }}"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Delete old directory if it exists to unpack war
      file:
        path: "{{ stage_webapp_path }}"
        state: absent

    - name: Create directory to unpack war
      file:
        path: "{{ stage_webapp_path }}"
        state: directory

    - name: Unpack WAR
      unarchive:
        src: "oap-mstr-web.war"
        dest: "{{ stage_webapp_path }}"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Create logger.properties
      template:
        src: "resources/{% if config['has_advanced_mstr_logging'] %}advanced_mstr_logging{% else %}logging{% endif %}.properties"
        dest: "{{ stage_webapp_xml_path }}/logger.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Create AdminServers.xml
      template:
        src: resources/AdminServers.j2
        dest: "{{ stage_webapp_xml_path }}/AdminServers.xml"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Create sys_defaults_{SERVER}.properties
      template:
        src: resources/properties.j2
        dest: "{{ stage_webapp_xml_path }}/sys_defaults_{{ ansible_hostname | upper }}.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        properties: "{{ config['sys_defaults_server_settings'] }}"

    - name: Create sys_defaults.properties
      copy:
        src: resources/sys_defaults.properties
        dest: "{{ stage_webapp_xml_path }}/sys_defaults.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Update system defaults
      xml:
        path: "{{ stage_webapp_xml_path }}/sys_defaults.xml"
        xpath: /prs/pr[@n='useLastDataSourceToGetElements']
        attribute: v
        value: "1"

    - name: Create ContainerServices.properties
      copy:
        src: resources/ContainerServices.properties
        dest: "{{ stage_webapp_classes_path }}/ContainerServices.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Create okta-sso.properties
      template:
        src: resources/properties.j2
        dest: "{{ stage_webapp_classes_path }}/okta-sso.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        properties: "{{ config['okta-sso_settings'] }}"

    - name: Ensure plugin folders
      file:
        path: "{{ plugins_path_tmpl }}"
        state: directory
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        plugin_name: "{{ item }}"
      with_items:
        - oap_mstr_registry_plugin
        - listmanager_plugin
        - oap_mstr_sso_okta_plugin
        - oap_mstr_scheduled_export_plugin

    - name: Create registry settings
      template:
        src: resources/properties.j2
        dest: "{{ plugins_path_tmpl }}/settings.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        properties: "{{ config['reg_settings'] }}"
        plugin_name: oap_mstr_registry_plugin

    - name: Create scheduled export settings
      template:
        src: resources/properties.j2
        dest: "{{ plugins_path_tmpl }}/scheduled_export.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        properties: "{{ config['scheduled_export_settings'] }}"
        plugin_name: oap_mstr_scheduled_export_plugin

    - name: Create list manager settings
      template:
        src: resources/properties.j2
        dest: "{{ plugins_path_tmpl }}/listUploadConfig.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        properties: "{{ config['listmanager_settings'] }}"
        plugin_name: listmanager_plugin

    - name: Create list manager DIY settings
      template:
        src: resources/properties.j2
        dest: "{{ plugins_path_tmpl }}/listCreateFromVI.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        properties: "{{ config['listmanager_diy_settings'] }}"
        plugin_name: listmanager_diy_plugin

    - name: Create okta-esm-plugin.properties
      template:
        src: resources/properties.j2
        dest: "{{ plugins_path_tmpl }}/okta-esm-plugin.properties"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        properties: "{{ config['okta_esm_settings'] }}"
        plugin_name: oap_mstr_sso_okta_plugin

    - name: Create client_users_lookup.json
      copy:
        content: "{{ config.client_users_group_guid_to_users_folder_lookup | to_nice_json(indent=2) }}"
        dest: "{{ plugins_path_tmpl }}/client_users_lookup.json"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"
      vars:
        plugin_name: oap_mstr_sso_okta_plugin

    - name: Create ClientReference.json
      copy:
        content: "{{ config.client_reference | to_nice_json(indent=2) }}"
        dest: "{{ stage_webapp_classes_path }}/ClientReference.json"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Create CustomAlertMessage.json
      copy:
        content: "{{ config.custom_alert_message | to_nice_json(indent=2) }}"
        dest: "{{ stage_webapp_classes_path }}/CustomAlertMessage.json"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    # ootb MicroStrategy webapp has three folders on shared storage. (plugins,images,WEB-INF)
    # That doesn't work so well with our web customizations, mainly esm plugin properties and tokens end up in shared storage
    # and won't work well since token values are supposed to be different based on which server is processing a request which becomes a problem
    # when token files are not separate per web server due to shared storage
    # This temp fix moves ootb MicroStragegy webapp outside of webapps folder with different name which also prevents auto deploy
    # Also, this will run for singlebox as well without any problems and will just provider a backup of ootb webapp
    # Backlog ticket to fix this: [OAP-]
    - name: Move ootb MicroStrategy webapp to MicroStrategy_Orig outside of webapps folder
      shell: mv "webapps/MicroStrategy" "MicroStrategy_Orig"
      args:
        chdir: "{{ tomcat_root }}"
        creates: "{{ tomcat_root }}/MicroStrategy_Orig"

    - name: Update /etc/fstab on clustered environment for mv "webapps/MicroStrategy" "MicroStrategy_Orig"
      replace:
        path: /etc/fstab
        regexp: '^(.+)\/opt\/apache\/tomcat\/latest\/webapps\/MicroStrategy\/(.+)$'
        replace: '\1/opt/apache/tomcat/latest/MicroStrategy_Orig/\2'

    - name: Sync staged version of webapp with deployed
      synchronize:
        src: "{{ stage_webapp_path }}/"
        dest: "{{ webapp_path }}"
        delete: yes
        recursive: yes
        rsync_opts:
          -  "--exclude-from=resources/rsync-filter-exclude.txt"
      no_log: true
      notify:
        - Reload MicroStrategy webapp

    - name: Run mstr trust script
      command: >
        ./mstr_trust.py
        --mstr_trust_token_key /{{ envname }}/mstr_trust_token
        --webapp_path http://{{ envname }}
        --iserver_names {{ iservers | join(',') }}
      args:
        chdir: ./scripts

    - name: Create a Context path xml file
      template:
        src: resources/Context.j2
        dest: "{{ tomcat_root }}/conf/Catalina/localhost/{{ ssm_params.elb_path }}#{{ webapp_name }}.xml"
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Copy fonts
      copy:
        src: "{{ stage_webapp_path }}/fonts/"
        dest: /opt/mstr/MicroStrategy/install/PDFGeneratorFiles
        owner: "{{ default_owner }}"
        group: "{{ default_group }}"

    - name: Copy images
      copy:
        src: "{{ stage_webapp_path }}/images/Optum"
        dest: /opt/mstr/MicroStrategy/IntelligenceServer/images
        owner: "{{ default_owner }}"

    - name: Create scheduled export output directory
      file:
        path: "{{ config['scheduled_export_settings']['FILE_LOCATION'] }}"
        state: directory
        owner: "{{ default_owner }}"
        mode: "0755"
