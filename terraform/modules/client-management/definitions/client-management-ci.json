{
    "Comment": "Workflow for testing client management use cases: #1 - new client on new stack, #2 - new client on existing stack and #3 - existing client on new stack (rotation)",
    "StartAt": "New Client on New Stack",
    "States": {
        "New Client on New Stack": {
            "Comment": "First use case: add new client on new stack",
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "Parameters": {
                "StateMachineArn": "${CLIENT_MANAGEMENT_SFN_ARN}",
                "Input": {
                    "isNewClient": "true",
                    "isNewEnvironment": "true",
                    "backupUrl.$": "$.backupUrl",
                    "environmentName.$": "$.environmentName",
                    "environmentType.$": "$.environmentType",
                    "platformInstanceType.$": "$.platformInstanceType",
                    "rdsInstanceType.$": "$.rdsInstanceType",
                    "releaseId.$": "$.releaseId",
                    "runPostInstall.$": "$.runPostInstall",
                    "deployRW.$": "$.deployRW",
                    "deployWAR.$": "$.deployWAR",
                    "deployMSTR.$": "$.deployMSTR",
                    "clientId.$": "$.firstClientId",
                    "clientName.$": "$.firstClientName",
                    "clientHasEGR.$": "$.firstClientHasEGR",
                    "clientHasCubes.$": "$.firstClientHasCubes",
                    "redshiftId.$": "$.redshiftId",
                    "appElbPath.$": "$.appElbPath",
                    "mstrVersion.$": "$.mstrVersion",
                    "backupDumpMode.$": "$.backupDumpMode"
                }
            },
            "OutputPath": "$",
            "ResultPath": "$.results.newClientNewStack",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Notify Failure"
                }
            ],
            "Next": "Wait for New Stack"
        },
        "Wait for New Stack": {
            "Type": "Wait",
            "Seconds": 300,
            "Next": "New Client on Existing Stack"
        },
        "New Client on Existing Stack": {
            "Comment": "Second use case: add new client on existing stack",
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "Parameters": {
                "StateMachineArn": "${CLIENT_MANAGEMENT_SFN_ARN}",
                "Input": {
                    "isNewClient": "true",
                    "isNewEnvironment": "false",
                    "envId.$": "$.results.newClientNewStack.Output",
                    "environmentName.$": "$.environmentName",
                    "deployRW.$": "$.deployRW",
                    "clientId.$": "$.secondClientId",
                    "clientName.$": "$.secondClientName",
                    "clientHasEGR.$": "$.secondClientHasEGR",
                    "clientHasCubes.$": "$.secondClientHasCubes",
                    "redshiftId.$": "$.redshiftId",
                    "appElbPath.$": "$.appElbPath",
                    "mstrVersion.$": "$.mstrVersion",
                    "backupDumpMode.$": "$.backupDumpMode"
                }
            },
            "OutputPath": "$",
            "ResultPath": "$.results.newClientExistingStack",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 120,
                    "MaxAttempts": 5,
                    "BackoffRate": 1
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Notify Failure"
                }
            ],
            "Next": "Existing Client on New Stack (Rotation)"
        },
        "Existing Client on New Stack (Rotation)": {
            "Comment": "Third use case: add existing client on new stack (rotation)",
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "Parameters": {
                "StateMachineArn": "${CLIENT_MANAGEMENT_SFN_ARN}",
                "Input": {
                    "isNewClient": "false",
                    "backupClientId.$": "$.firstClientId",
                    "oldEnvId.$": "$.results.newClientNewStack.Output",
                    "environmentName.$": "$.environmentName",
                    "environmentType.$": "$.environmentType",
                    "platformInstanceType.$": "$.platformInstanceType",
                    "rdsInstanceType.$": "$.rdsInstanceType",
                    "releaseId.$": "$.releaseId",
                    "runPostInstall.$": "$.runPostInstall",
                    "deployWAR.$": "$.deployWAR",
                    "redshiftId.$": "$.redshiftId",
                    "appElbPath.$": "$.appElbPath",
                    "mstrVersion.$": "$.mstrVersion",
                    "backupDumpMode.$": "$.backupDumpMode"
                }
            },
            "OutputPath": "$",
            "ResultPath": "$.results.existingClientNewStack",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Notify Failure"
                }
            ],
            "Next": "Destroy New Environments?"
        },
        "Destroy New Environments?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.destroyNewEnvironments",
                    "StringEquals": "true",
                    "Next": "Destroy First Environment"
                }
            ],
            "Default": "Notify Success"
        },
        "Destroy First Environment": {
            "Comment": "Destroy first environment created with first use case of new client on new stack",
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "Parameters": {
                "StateMachineArn": "${MSTR_ENVIRONMENT_DESTROY_SFN_ARN}",
                "Input": {
                    "envId": "$.results.newClientNewStack.Output"
                }
            },
            "OutputPath": "$",
            "ResultPath": "$.results.destroyFirstEnvironment",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Notify Failure"
                }
            ],
            "Next": "Destroy Second Environment"
        },
        "Destroy Second Environment": {
            "Comment": "Destroy second environment created with third use case of existing client on new stack (rotation)",
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "Parameters": {
                "StateMachineArn": "${MSTR_ENVIRONMENT_DESTROY_SFN_ARN}",
                "Input": {
                    "envId": "$.results.existingClientNewStack.Output"
                }
            },
            "OutputPath": "$",
            "ResultPath": "$.results.destroySecondEnvironment",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Notify Failure"
                }
            ],
            "Next": "Notify Success"
        },
        "Notify Failure": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "Parameters": {
                "TopicArn": "${NOTIFICATION_SNS_TOPIC}",
                "Subject": "FAILURE: ${ENV_PREFIX}-client-management-ci-sfn",
                "Message": {
                    "StateMachineName.$": "$$.StateMachine.Name",
                    "StateMachineId.$": "$$.StateMachine.Id",
                    "ExecutionName.$": "$$.Execution.Name",
                    "ExecutionId.$": "$$.Execution.Id",
                    "ExecutionInput.$": "$$.Execution.Input"
                },
                "MessageAttributes": {
                    "ExecutionStatus": {
                        "DataType": "String",
                        "StringValue": "failure"
                    }
                }
            },
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": null,
            "Next": "Workflow Failed"
        },
        "Workflow Failed": {
            "Type": "Fail",
            "Cause": "Workflow failed",
            "Error": "See execution logs"
        },
        "Notify Success": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "Parameters": {
                "TopicArn": "${NOTIFICATION_SNS_TOPIC}",
                "Subject": "SUCCESS: ${ENV_PREFIX}-client-management-ci-sfn",
                "Message": {
                    "StateMachineName.$": "$$.StateMachine.Name",
                    "StateMachineId.$": "$$.StateMachine.Id",
                    "ExecutionName.$": "$$.Execution.Name",
                    "ExecutionId.$": "$$.Execution.Id",
                    "ExecutionInput.$": "$$.Execution.Input"
                },
                "MessageAttributes": {
                    "ExecutionStatus": {
                        "DataType": "String",
                        "StringValue": "success"
                    }
                }
            },
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": null,
            "Next": "Workflow Succeeded"
        },
        "Workflow Succeeded": {
            "Type": "Pass",
            "InputPath": "$",
            "OutputPath": "$",
            "End": true
        }
    }
}