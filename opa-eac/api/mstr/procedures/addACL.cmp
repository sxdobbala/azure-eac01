<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<PROCEDURE_DEFINITION>
<DESCRIPTION>This procedure applies ACL for the object only if matching ACL is not present on object for same group. If non matching ACL is present, then the existing ACL is removed and new ACL will be applied. ChildrenAccessRights field is optional and it is checked or applied only for Folders.Propagate field is needed only for Folders. propagate field values - PROPAGATE OVERWRITE RECURSIVELY, PROPAGATE OVERWRITE, PROPAGATE RECURSIVELY
Examples:

EXECUTE PROCEDURE addACL ("Performance Analytics", "REPORT","SRE Scores","Public Objects\Reports\Advanced Workspace Datasets\Patient Advanced Workspace Data Sets\Scores", "OPA Access - Clinical Only Offering","DENIEDALL","","");

EXECUTE PROCEDURE addACL ("Performance Analytics", "Folder","Financial Risk Analytics Data Sets","Public Objects\Reports\Advanced Workspace Datasets\Patient Advanced Workspace Data Sets", "OPA Access - Clinical Only Offering","DENIEDALL","DENIEDALL","PROPAGATE OVERWRITE RECURSIVELY");

EXECUTE PROCEDURE addACL ("Performance Analytics", "HIERARCHY","Eligibility","Schema Objects\Hierarchies\Data Explorer", "OPA Access - Clinical Only Offering","DENIEDALL","","");</DESCRIPTION>
<CODE>String sQuery =  "LIST ALL PROPERTIES FOR ACL FROM " +objectType+  " \""+objectName+"\"  IN FOLDER  \""+folderPath+"\"  FOR PROJECT \""+projectName+"\";";&#13;
printOut(sQuery);&#13;
ResultSet listOfAcls  = executeCapture(sQuery);&#13;
&#13;
listOfAcls.moveFirst();&#13;
boolean foundexistingMatchingACL = false;&#13;
boolean foundexistingNonMatchingACL = false;&#13;
boolean isFolder = false;&#13;
boolean isPropagate = false;&#13;
String propagateText ="";&#13;
&#13;
if(objectType.toLowerCase().equals("folder")) isFolder = true;&#13;
&#13;
String childrenAccessRightskeyword ="";&#13;
String childrenAccessRightsValue ="";&#13;
if(isFolder){&#13;
         childrenAccessRightskeyword = "CHILDRENACCESSRIGHTS";&#13;
         childrenAccessRightsValue = childrenAccessRights;&#13;
}&#13;
if(propagate.toUpperCase().equals("PROPAGATE OVERWRITE RECURSIVELY")
   || propagate.toUpperCase().equals("PROPAGATE RECURSIVELY")
   || propagate.toUpperCase().equals("PROPAGATE OVERWRITE")){&#13;
       propagateText = propagate.toUpperCase();&#13;
       isPropagate = true;&#13;
}&#13;
&#13;
while(!listOfAcls.isEof()){    &#13;
        String trusteeName = listOfAcls.getFieldValueString(TRUSTEE_NAME);&#13;
        String accessRightsAvailable = listOfAcls.getFieldValueString(ACCESS_RIGHTS);&#13;
&#13;
&#13;
        if (trusteeName.equals(groupName)){&#13;
          &#13;
                if (accessRightsAvailable.equals(accessRights))&#13;
&#13;
                        foundexistingMatchingACL = true;&#13;
&#13;
                else foundexistingNonMatchingACL = true;&#13;
        break;&#13;
        }&#13;
listOfAcls.moveNext();&#13;
}&#13;
&#13;
if(!foundexistingMatchingACL){&#13;
&#13;
        if(foundexistingNonMatchingACL){&#13;
&#13;
                sQuery = "REMOVE ACE FROM " +objectType+  " \""+objectName+"\" IN FOLDER   \""+folderPath+"\" GROUP  \""+groupName+"\" FOR PROJECT \""+projectName+"\";";&#13;
       execute(sQuery);&#13;
        }&#13;
&#13;
&#13;
&#13;
sQuery = "ADD ACE FOR " +objectType+  " \""+objectName+"\" IN FOLDER   \""+folderPath+"\" GROUP  \""+groupName+"\" ACCESSRIGHTS "+ accessRights +" " +childrenAccessRightskeyword+  " "+childrenAccessRightsValue+" FOR PROJECT \""+projectName+"\";";&#13;
       execute(sQuery);&#13;
if(isFolder &amp;&amp; isPropagate){&#13;
        sQuery = "ALTER ACL FOR " +objectType+  " \""+objectName+"\" IN FOLDER   \""+folderPath+"\" "+propagateText+" FOR PROJECT\""+projectName+"\";";&#13;
       execute(sQuery);&#13;
}&#13;
}&#13;
&#13;
 &#13;
 </CODE>
<SAMPLE/>
<VERSION>1.0</VERSION>
<TYPE>CUSTOM</TYPE>
<INPUT_PARAMS>
<INPUT INPUT_TYPE="STRING">projectName</INPUT>
<INPUT INPUT_TYPE="STRING">objectType</INPUT>
<INPUT INPUT_TYPE="STRING">objectName</INPUT>
<INPUT INPUT_TYPE="STRING">folderPath</INPUT>
<INPUT INPUT_TYPE="STRING">groupName</INPUT>
<INPUT INPUT_TYPE="STRING">accessRights</INPUT>
<INPUT INPUT_TYPE="STRING">childrenAccessRights</INPUT>
<INPUT INPUT_TYPE="STRING">propagate</INPUT>
</INPUT_PARAMS>
<CLASSPATH/>
<TEST_INPUT>
<TEST_INPUT_PARAM>Performance Analytics - 20181219</TEST_INPUT_PARAM>
<TEST_INPUT_PARAM>FOLDER</TEST_INPUT_PARAM>
<TEST_INPUT_PARAM>AutoStyles</TEST_INPUT_PARAM>
<TEST_INPUT_PARAM>Public Objects</TEST_INPUT_PARAM>
<TEST_INPUT_PARAM>Everyone</TEST_INPUT_PARAM>
<TEST_INPUT_PARAM>CUSTOM GRANT READ, USE, EXECUTE DENY BROWSE, WRITE, DELETE, CONTROL</TEST_INPUT_PARAM>
<TEST_INPUT_PARAM>CUSTOM GRANT READ, USE, EXECUTE DENY BROWSE, WRITE, DELETE, CONTROL</TEST_INPUT_PARAM>
<TEST_INPUT_PARAM>PROPAGATE OVERWRITE RECURSIVELY</TEST_INPUT_PARAM>
</TEST_INPUT>
<TEST_CONNECTION_INFO>
<TEST_PSN_NAME>02 DEV (som-opa-d01)</TEST_PSN_NAME>
<TEST_USERNAME>scheruku</TEST_USERNAME>
<TEST_PASSWORD>0000000039de50b53b6e5d27df7d78bf04cb65af0fc6bc84009ee818f88949cc24c5e5df07a934cde4d07545e023fec6</TEST_PASSWORD>
</TEST_CONNECTION_INFO>
</PROCEDURE_DEFINITION>
